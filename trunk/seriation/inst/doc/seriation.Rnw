\documentclass[10pt,a4paper,fleqn]{article}

\usepackage{a4wide}
%\setlength{\parindent}{0pt}
%\setlength{\parskip}{6pt plus 2pt minus 1pt}

\usepackage[round,longnamesfirst]{natbib}
\usepackage{hyperref}

\usepackage{amsmath}
\usepackage{amsfonts}

\newcommand{\strong}[1]{{\normalfont\fontseries{b}\selectfont #1}}
\newcommand{\class}[1]{\mbox{\textsf{#1}}}
\newcommand{\func}[1]{\mbox{\texttt{#1()}}}
\newcommand{\code}[1]{\mbox{\texttt{#1}}}
\newcommand{\pkg}[1]{\strong{#1}}
\newcommand{\samp}[1]{`\mbox{\texttt{#1}}'}
\newcommand{\proglang}[1]{\textsf{#1}}
\newcommand{\set}[1]{\mathcal{#1}}

\DeclareMathOperator*{\argmin}{argmin}
\DeclareMathOperator*{\argmax}{argmax}

\usepackage{Sweave}
%% \VignetteIndexEntry{Introduction to seriation}



\begin{document}


<<echo=FALSE>>=
options(width = 75)
### for sampling
set.seed(1234)
@

\title{Introduction to the package \pkg{seriation}}
\author{Michael Hahsler and Christian Buchta and Kurt Hornik}
\maketitle
\sloppy

\abstract{To come\dots}
\section{Introduction}
\marginpar{rewrite introduction}
A basic problem in data analysis is to arrange objects in linear order given
available data. For example, political scientists may want to order judges from
the most liberal to the most conservative person according to their rulings,
psychologists may try to order subjects by their developmental stage using
questionnaire data, or archaeologists may order graves according to age given the
found artifacts. This type of problem is 
sometimes referred to as \emph{ordination} usually called \emph{unidimensional 
seriation.} 

Seriation was first used as a formal method by \cite{seriation:Petrie:1899} to
find a chronological order for graves discovered in the Nile area given objects
found there. The idea was that different objects continuously go in and out
of fashion and a contingency table of grave sites times objects can be
rearranged using row and column permutations till all large values are close to
the diagonal. Initially, the rearrangement of rows and columns of the
contingency was done manually and the adequacy was only judged subjectively 
by the researcher. Later, \cite{seriation:Robinson:1951}, 
\cite{seriation:Kendall:1971} and others 
proposed measures of agreement between rows to quantify optimality of the 
resulting table. A comprehensive description of the development of seriation
in archeology can be found in \cite{seriation:Ihm:2005}.

Today \dots blabla \dots

\section{Unidimensional seriation}
To seriate a set of $n$ objects $\{O_1,\dots,O_n\}$ one typically starts with a
$n \times n$ symmetric matrix $\mathbf{S} = (s_{ij})$ where $s_{ij}$ represents
the proximity between the objects $O_i$ and $O_j$.  We assume that the
proximities increase with object similarity.  The problem is now to find a
permutation function $\pi: \{1,\dots,n\} \rightarrow \{1,\dots,n\}$, i.e. a
bijection that maps the set of indices of the objects (and equally of rows and
columns of $\mathbf{S}$) onto itself, which results in an order of objects most
consistent with the proximities in $\mathbf{S}$.
%The permutation function can also be used to relabel rows and columns
%of the proximity matrix resulting in a rearranged matrix 
%$\mathbf{R'} = [r(\pi(i),\pi(j))]$. 

A symmetric matrix where the values in all rows and columns only decrease when
moving away from the main diagonal is called a \emph{Robinson matrix} after the
statistician \cite{seriation:Robinson:1951}. Formally, 
a matrix $\mathbf{S}$ is in Robinson form if, and only if 
\begin{equation}
    s_{ij} \ge s_{i,j+1} \quad \text{for all} \quad j \ge i 
    \quad \text{and} \quad
    s_{i,j-1} \le s_{ij} \quad \text{for all} \quad j \le i
\end{equation}
holds. Since in such a matrix the largest values appear close to the main
diagonal, the closer objects are together in the order of the matrix,
the higher their proximity. This provides a natural way to define 
consistency and results in the
objective of seriation: find the permutation $\pi^*$ which
results in a rearranged proximity matrix $\mathbf{S'} = (s_{\pi(i)\pi(j)})$
which is in Robinson form. However, there are two problems:
\begin{enumerate}
    \item For most data sets, proximity matrices cannot be rearranged into a
        perfect Robinson form.
    \item The number of possible permutations is $n!$ which makes an exhaustive 
        search for medium to large $n$ infeasible.
\end{enumerate}

The first problem
indicates that one needs to find a permutation which results into a matrix as
close to the Robinson form as possible. To quantify closeness, measures of
divergence from the Robinson form have to be defined. Such measures are
defined in Section~\ref{sec:criteria}.

The second problem, to find the permutation that minimized the measure of
divergence from the Robinson form can be addressed by using search heuristics
or methods which reduce the search space (e.g., dynamic
programming~\citep{seriation:Hubert:1981}). Search heuristics for
different measures are presented in Section~\ref{sec:methods}.


\section{Seriation criteria}
\label{sec:criteria}
In the literature several criteria to judge the quality of a seriation are
suggested. In the following, we define some commonly used criteria.

Without loss of generality, we assume in the definitions that 
the proximity matrix contains dissimilarities (instead of similarities 
as used above).
This has just the technical reason that dissimilarity matrices are 
currently the most common from to store proximities in R (see \code{dist} in
package~\pkg{stats}). To reflect this change we will use the letter 
$\mathbf{D}$ for the $n \times n$ dissimilarity matrix. Typically,
similarities can be transformed into dissimilarities by
$\mathbf{D} = 1 / (1 + \mathbf{S})$ or by  $\mathbf{D} = 1 - \mathbf{S}$.


\subsection{Anti-Robinson events}

A Robinson matrix \citep{seriation:Robinson:1951} has its columns arranged such
that the values of the cells always decrease when moving away from the
diagonal. To measure the divergence from the Robinson form, the number of
anti-Robinson events (the value increases instead of decreases) can be counted.
The more anti-Robinson events occur in a matrix, the larger the divergence.
Note that we use a dissimilarity matrix instead of a similarity matrix used by
Robinson. Therefore cell values have to increase moving away from the main
diagonal to represent decreasing similarity.

Following~\cite{seriation:Chen:2002}, we define three criteria to measure the
divergence of a matrix from the Robinson form.  All three criteria use the
anti-Robinson events, but weight them differently:
\begin{equation}
    \sum_{i=1}^p \biggl( \sum_{j<k<i}^n I(d_{ij}<d_{ik})\; w_{ijk}%
    + \sum_{i<j<k} I(d_{ij} > d_{ik})\; w_{ijk} \biggr),
\end{equation}
where $I$ is an indicator function and $w_{ijk}$ is a weight.

For the raw number of anti-Robinson events, the weight is 
\begin{equation}
    w_{ijk} = 1.
\end{equation}

For the sum of absolute anti-Robinson deviations, the
deviations are used as the weight, i.e.,  
\begin{equation}
    w_{ijk} = |d_{ij} - d_{ik}|.
\end{equation}

For the weighted sum of absolute anti-Robinson deviations, the deviations are
weighted by the difference of column indices, i.e., 
\begin{equation}
    w_{ijk} = |j-k||d_{ij} - d_{ik}|.
\end{equation}

\subsection{Least squares criterion} 
A natural seriation criterion is to quantify the deviations between the 
dissimilarities in $\mathbf{D}$ and the rank differences of the objects
in the order $\pi$. Such deviations can be measured, e.g, by the
sum of squares of deviations \citep{seriation:Caraux:2005} defined by
\begin{equation}
    \sum_{i=1}^n \sum_{j=1}^n (d_{ij} - |i-j|)^2,
\end{equation}
where $|i-j|$ is the rank difference or gap between $O_i$ and $O_j$ in the 
order $\pi$.

The least squares criterion is related to 
unidimensional scaling~\citep{seriation:Leeuw:2005}, 
where the objective is to place all objects on a straight line such that
the dissimilarities in $\mathbf{D}$ are preserved 
by the relative positions in the best possible way.
The optimization problem of unidimensional scaling is to minimize 
$\sum_{i=1}^n \sum_{j=1}^n (d_{ij} - |x_i-x_j|)^2$ which is close
to the seriation problem, but in addition to the ranking of the 
objects also takes the distances between objects on the resulting
scale into account.

Note that if Euclidean distance is used to calculate $\mathbf{D}$ from a data
matrix $\mathbf{X}$, the order of the elements in $\mathbf{X}$ by projecting
them on the first principal component of $\mathbf{X}$ minimizes this criterion.
\marginpar{is that correct?}

\subsection{Inertia criterion} 
Another way to look at the seriation problem is not to 
focus on placing small dissimilarity values close to the diagonal, but to
push large values away from it. A measure to quantify this,
the moment of inertia of dissimilarity values 
around the diagonal \citep{seriation:Caraux:2005} is defined as
\begin{equation}
    \sum_{i=1}^n \sum_{j=1}^n d_{ij}|i-j|^2.
\end{equation}
$|i-j|$ is used as a measure for the distance to the diagonal and
$d_{ij}$ gives the weight. 
The criterion increases when higher dissimilarity values are placed
farther away from the diagonal.

\subsection{Hamiltonian path length}
The dissimilarity matrix $\mathbf{D}$ can be represented as a finite weighted
graph $G = (O,E)$ where the set of objects $O$ constitute the vertices and each
edge $e_{ij} \in E$ between the objects $O_i$ and $O_j$ has a weight $w_ij$
associated which represents the dissimilarity $d_{ij}$.

Such a graph can be used for 
seriation~\citep[see, e.g.,][]{seriation:Hubert:1974,seriation:Caraux:2005}. 
An order $\pi$ of the objects can be seen as a path through the graph where
each node is visited only once, i.e., a Hamilton path. The length of such a
path is given by
\begin{equation}
    \sum_{i=1}^{n-1} d_{\pi(i)\pi(i+1)}.
\end{equation}
Minimizing the path length results in an seriation optimal with respect to 
dissimilarities between neighboring objects. 
However, only dissimilarities adjacent to the main diagonal (i.e.,
between neighboring objects) contribute to the 
measure. Therefore, this criterion does not enforce a full Robinson form.

Note that the length of the Hamiltonian path is equal to the 
value of the \emph{minimal span loss function} 
\citep[as used by][]{seriation:Chen:2002}),
and both notions are related to the 
\emph{traveling salesperson problem}~\citep{seriation:Gutin:2002}.


\subsection{Measure of effectiveness (bond energy)}
\label{sec:ME}

\cite{seriation:McCormick:1972} defined the
the \emph{measure of effectiveness (ME)} for 
a $n \times m$ matrix $\mathbf{X} = (x_{ij})$ as
\begin{equation}
    \frac{1}{2}
    \sum_{i=1}^{n} \sum_{j=1}^{m} x_{ij}[x_{i,j-1}+x_{i,j+1}+
        x_{i-1,j}+x_{i+1,j}]
    \label{equ:ME}
\end{equation}
with, by convention $x_{0,j}=x_{n+1,j}=x_{i,0}=x_{i,m+1}=0$.
ME is maximized if each element is as closely related numerically
to its four neighboring elements.
\marginpar{check n and m for consistency}

%From the definition in (\ref{equ:BE}), it is easy to see that the
%measure can be decomposed into two independent terms, one only 
%dependent on the order of the columns (left product in the sum) and on of 
%the order of the rows (right product in the sum).

Although ME was developed for general (positive) matrices, it can be used as a
measure of seriation quality for symmetric similarity matrices since it gets
maximal only if all large values are grouped together around the main diagonal. 

\subsection{Stress}

Stress~\citep{seriation:Niermann:2005} measures
the conciseness of the presentation of a matrix/table and can
be seen as a purity function which compares the values in a matrix/table with
their neighbors. The stress measures used here 
are computed as the sum of squared
distances of each matrix entry from its adjacent entries. 
We define for a $n \times m$ matrix $\mathbf{X} = x_{ij}$
two types of neighborhoods:

\begin{itemize}
    \item The Moore neighborhood comprises the eight adjacent entries.
        The local stress measure for element $x_{ij}$ is defined as
        \begin{equation}
            stress_{ij} = \sum_{k=\max(1,i-1)}^{\min(n,i+1)} 
                \sum_{l=\max(1,j-1)}^{\min(m,j+1)} 
                (x_{ij} - x_{kl})^2
        \end{equation}

    \item The Neumann neighborhood comprises the four adjacent entries
        resulting in the local stress of $x_{ij}$ of
        \begin{equation}
            stress_{ij} = 
            \sum_{k=\max(1,i-1)}^{\min(n,i+1)} (x_{ij} - x_{kj})^2 + 
            \sum_{l=\max(1,j-1)}^{\min(m,j+1)} (x_{ij} - x_{il})^2
            %(x_{ij} - x(i-1,j))^2 + (x_{ij} - x(i+1,j))^2 +
            %(x_{ij} - x(i,j-1))^2 + (x_{ij} - x(i,j+1))^2
        \end{equation}
\end{itemize}

Both local stress measures can be used to construct measures for the whole
table by summing over all entries:
\begin{equation}
    \sum_{i=1}^n \sum_{j=1}^m stress_{ij}
\end{equation}

The major difference between the Moore and the Neumann neighborhood is that
for the later row and column permutations are separable and can
be optimized independently.

Obviously, stress can be also used to measure the quality of seriation for
symmetric proximity matrices, since it can only be optimal, if large values
are concentrated around the main diagonal.

\section{Seriation methods}
\label{sec:methods}


\subsection{Traveling salesperson problem solver}

Minimizing the length of a Hamiltonian path through a graph can be done by
solving a traveling salesperson problem.  The traveling salesperson or salesman
problem (TSP) is a well known and well researched combinatorial optimization
problem. The goal is to find the shortest tour that visits each city in a given
list exactly once and then returns to the starting city. In graph theory a TSP
tour is called a \emph{Hamiltonian cycle.} But for the seriation problem, we
are looking for a Hamiltonian path. \cite{seriation:Garfinkel:1985} described a
simple transformation of the TSP to find the shortest Hamiltonian path. To the
original $n \times n$ dissimilarity matrix $\mathbf{D}$ an additional row and
column of 0's is added (sometimes this is referred to as a \emph{dummy city}).
The solution of this $(n+1)$-city TSP, gives the shortest path where the city
representing the added row/column cuts the cycle into a linear path.

Despite this simple problem statement, solving the TSP is difficult since it
belongs to the class of NP-complete problems. In the seriation case with $n+1$
cities, $n!$ tours have to be checked. However, despite this vast searching
space, small instances can be solved efficiently using dynamic programming
\citep{seriation:Held:1962} and larger instances can be solved using
\emph{branch-and-cut} algorithms~\citep{seriation:Padberg:1990}. For large
instances or if running time is critical, a wide array of heuristics are
available, ranging from simple nearest neighbor approaches to construct a
tour~\citep{seriation:Rosenkrantz:1977} to complex heuristics like the
Lin-Kernighan heuristic~\citep{seriation:Lin:1973}.
A comprehensive overview can be found in \cite{seriation:Gutin:2002}.

\subsection{Rank-two ellipse seriation}

\cite{seriation:Chen:2002} proposes to
generate a sequence of correlation matrices
$R^1, R^2, \ldots$. $R^1$ is the correlation matrix
of the original distance matrix $\mathbf{D}$ and
\begin{equation}
R^{n+1} = \phi R^n,
\end{equation}
where $\phi(\cdot)$ calculates a correlation matrix.

The rank of the matrix $R^n$ falls with increasing $n$. The sequence
is continued till the first matrix in the sequence has a rank of 2.
Projecting all points in this matrix on the first two eigenvectors,
all points fall on an ellipse. The order of the points on this ellipse
is the resulting order where the ellipse can be cut at any of the 
two interception points (top or bottom) with the vertical axis.

\subsection{Hierarchical clustering}
\label{sec:hierarchical_clustering}

Hierarchical clustering produces a series of nested clusterings which can be
visualized by a dendrogram, a binary tree where each internal node splits two
subtrees has a measure of similarity/dissimilarity attached to it.  A heuristic
to find a linear order of objects, the order of the leaf nodes in a dendrogram
structure can be used.  This idea is used, e.g.,  by heatmaps to reorder rows
and columns with the aim to place more similar objects and variables closer
together.  For hierarchical clustering several methods are available (e.g.,
single linkage, average linkage, complete linkage, ward method) resulting in
different dendrograms. 
However, the order of leaf nodes in a dendrogram is not unique.  A dendrogram
for $n$ objects has $2^{n-1}$ internal nodes (subtrees) and at  each internal
node the left and right subtree (or leaves) can be swapped resulting in
$2^{n-1}$ distinct leaf orderings.  

To find a unique or optimal order, an additional criterion
has to be defined.
\cite{seriation:Gruvaeus:1972} suggest to obtain a unique order by requiring to
order the leaf nodes such that at each level the objects at the edge of each
cluster are adjacent to that object outside the cluster to which it is nearest.

\cite{seriation:Bar-Joseph:2001} 
suggest to rearrange the dendrogram such that the 
Hamiltonian path connecting the leaves is minimized.
The  authors also present a algorithm with time complexity $O(n^4)$
to solve this optimization problem. Note that this problem is related to 
the TSP described above, however, the given dendrogram structure significantly
reduces the number of permissible permutations making the problem easier.


\subsection{Scaling}
\marginpar{MDS, PCA, CA,\dots}

\subsection{Bond energy algorithm}

\marginpar{more BEA}
The \emph{bond energy algorithm}~\citep[BEA;][]{seriation:McCormick:1972} 
is a simple heuristic to rearrange columns and rows of a matrix 
such that each entry is as closly numerically related to its four
neighbors as possible. This is equal to maximizing 
the measure of effectiveness (ME) defined in Section~\ref{sec:ME}.

The heuristic follows the following steps:
\begin{enumerate}
    \item Place one randomly chosen column.  
    \item Try to place each remaining
        column at each possible positions left, right and between the already
        placed columns and calulate every time the increase in ME.  Choose the
        column and position which gives the largest increase in ME and place
        the column. Repeat till all colums are placed.
    \item Repeat procedure with rows.
\end{enumerate}

This greedy algorithm works fast and is only dependent on the choice of the
first column/row. This dependence can be reduced by repeading the
procedure several times with different choices and return the solution
with the higherst ME.

Although \cite{seriation:McCormick:1972} use BEA also for non-binary data,
\cite{seriation:Arabie:1990} conclude, that BEA should only be used
for binary data.

Also talk about Murtagh's algorithm B~\cite{seriation:Murtagh:1985}.

\subsection{Rank-two ellipse seriation}

\cite{seriation:Chen:2002} proposes to
generate a sequence of correlation matrices
$R^1, R^2, \ldots$. $R^1$ is the correlation matrix
of the original distance matrix $\mathbf{D}$ and
\begin{equation}
R^{n+1} = \phi R^n,
\end{equation}
where $\phi(\cdot)$ calculates a correlation matrix.

The rank of the matrix $R^n$ falls with increasing $n$. The sequence
is continued till the first matrix in the sequence has a rank of 2.
Projecting all points in this matrix on the first two eigenvectors,
all points fall on an ellipse. The order of the points on this ellipse
is the resulting order where the ellipse can be cut at any of the 
two interception points (top or bottom) with the vertical axis.

\section{The \pkg{seriation} package infrastructure}

\begin{figure}[tp]
    \centerline{
    \includegraphics[width=12cm]{infrastructure}}

    \caption{The \pkg{seriation} package infrastructure}
    \label{fig:infrastructure}
\end{figure}

The basic infrastructure of the package is depicted in
Figure~\ref{fig:infrastructure}.
It consists of a method called \func{seriate} which takes 
objects of different R classes as input and returns an order
as an object of class \code{Order}. The class \code{Order} is virtual
has the following two concrete subclasses: 
\begin{itemize}
    \item \code{Order\_vector} which stores a single permutation vector to
        reorder, e.g., the objects in a dissimilarity matrix or the columns and
        rows of a symmetric matrix.  The class is implemented as a list with
        the element \code{order} containing the integer permutation vector.
    \item \code{Order\_matrix} which stores two permutation vectors, one
        for the columns and one for the rows of a matrix.
        The class is a list with the elements \code{row} and \code{column}.
\end{itemize}

For the special case of seriation of the leaf nodes of a dendrogram (class 
\code{hclust}) the resulting \code{Order\_vector} at the same time is also
a valid \code{hclust} object. This has the advantage, that all methods for
\code{hclust} (e.g., drawing a dendrogram) can still be used with the reordered
object.

For the subclasses of \code{Order} a simple construction function 
\code{Order(order, row, col)} is provided. Depending on whether 
\code{order} or \code{row} and \code{col} is given (each is a integer
permutation vector), the necessary subclass is created.

From Figure~\ref{fig:infrastructure} we see that the arguments of 
\func{seriate} are almost identical for different input data and
only vary slightly. For all input data the basic set of arguments is
the input data (\code{x}), the seriation method as a character string 
(\code{method}) and a list with optional control parameters for the 
seriation method (\code{control}). For \code{matrix} the additional argument
\code{margin} can be used if only column or row seriation is needed and not 
both. Is this the case, the result will be an object of class 
\code{Order\_vector} containing the respective order. For \code{hclust}
in second place the additional argument \code{dist} is inserted since
the dissimilarity information is needed by all seriation methods for
dendrogram reordering.


\begin{table}[t]
\centering
    \begin{tabular}{lccc}
        \hline
        Seriation method & Argument \code{method} & Input data \\
        \hline
        Traveling salesperson problem solver & \code{"tsp"} & \code{dist} \\
        Rank-two ellipse seriation & \code{"chen"} & \code{dist} \\
        Multidimensional scaling & \code{"mds"} & \code{dist} \\
        Hierarchical clustering & \code{"hc"} & \code{dist} \\
        Gruvaeus and Wainer & \code{"gw"} &  \code{dist}, \code{hclust} \\
        Optimal leaf ordering & \code{"optimal"} &  \code{dist}, \code{hclust} \\
        Principal component analysis & \code{"pca"} & \code{matrix} \\
        Correspondence analysis & \code{"ca"} & \code{matrix} \\
        Bond Energy Algorithm & \code{"bea"} & \code{matrix} \\
        Murtagh's Algorithm B & \code{"murtagh"} & \code{matrix} \\
        \hline
    \end{tabular}
\caption{Implemented seriation methods.}
\label{tab:methods}
\end{table}

Seriation methods were already introduced in this paper in 
Section~\ref{sec:methods}. In Table~\ref{tab:methods} we summarize the
methods available for seriation.

To judge the quality of an order obtained by a seriation method, the 
method \code{criterion(x, order, method)} can be used to calculate different 
seriation criteria. \code{x} is the dissimilarity or data matrix, 
\code{order} contains a suitable object of class \code{Order} and
\code{method} specifies the criteria to calculate. We already defined
different seriation criteria in Section~\ref{sec:criteria}. In 
Table~\ref{tab:criteria} we summarize available criteria.

\begin{table}[t]
\centering
    \begin{tabular}{lccc}
        \hline
        Seriation criterion & Argument \code{method} & Input data \\
        \hline
        Hamiltonian path length & \code{"path\_length"} & \code{dist} \\
        Least squares criterion& \code{"least\_squares"} & \code{dist} \\
        Inertia criterion& \code{"inertia"} & \code{dist} \\
        Anti-Robinson events& \code{"ar\_i"}, \code{"ar\_s"}, \code{"ar\_w"} & \code{dist} \\
        Measure of effectiveness and bond energy& \code{"me"}, \code{"bond\_energy"} & \code{matrix} \\
        Stress (Neumann neighborhood)& \code{"neumann\_stress"} & \code{matrix} \\
        Stress (Moore neighborhood)& \code{"moore\_stress"} & \code{matrix} \\
        \hline
    \end{tabular}
\caption{Implemented seriation criteria.}
\label{tab:criteria}
\end{table}

In addition the package offers the convenience method \func{rearrange(x,
order)} to rearrange the objects in a dissimilarity matrix (\code{dist}) or
rows and columns of a matrix using a suitable \code{Order} object. 

For visualization, the package offers 
several options:
\begin{itemize}
\item Matrix shading with \func{pimage}.
\item Different heat maps (e.g., with optimally reordered
    dendrograms) with \func{hmap}.
\item Visualization of data matrices with \func{bertinplot}.
\item \emph{Dissimilarity plot}, a new visualization for cluster 
quality using matrix shading with \func{dissplot}.
\end{itemize}

\section{Examples and applications}
<<echo=FALSE>>=
options(scipen=3, digits=4)
@

\subsection{A first session using \pkg{seriation}}
In the following example, we use the well known iris data set which gives the
measurements in centimeters of the variables sepal length and width and petal
length and width, respectively, for 50 flowers from each of 3 species of iris
(Iris setosa, versicolor and virginica). 

First, we load the package \pkg{seriation} and the iris data set. We
remove the class attribute and reorder the objects randomly since they 
are sorted by species in the data set. Then we calculate the Euclidean
distances between the objects.

<<>>=
library("seriation")

data("iris")
x <- as.matrix(iris[-5])
x <- x[sample(1:nrow(x)),]
d <- dist(x)
@

To seriate the objects given the dissimilarities, we just call
\func{seriate} with the default settings.

<<>>=
order <- seriate(d)
order
@

The result is an object of class \code{Order\_vector} for the 
$150$ objects in the iris data set. The default method, a traveling
salesperson heuristic, was used.

To visually compare the random and the seriated data, 
we use matrix shading with \func{pimage}.

<<label=pimage1, eval=FALSE>>=
pimage(d, main = "Random")
pimage(d, order, main = "Reordered")
@
<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-pimage1.png", type = "pnggray", 
    height = 2.8, width = 5, res = 300,pointsize=7)
def.par <- par(no.readonly = TRUE)
layout(t(1:2))
<<pimage1>>
par(def.par)
tmp <- dev.off()
@
\begin{figure}
    \centering
    \includegraphics[width=12cm]{seriation-pimage1}
    \caption{Matrix shading of the  distance matrix for the iris data.}
    \label{fig:pimage1}
\end{figure}

Finally, we can also compare the values of different seriation 
criteria using \func{criterion}.

<<>>=
rbind(random = criterion(d), reordered = criterion(d, order))
@

Naturally, the reordered dissimilarity matrix achieves better values for all
criteria (note that for measure of effectiveness and inertia 
larger values are better).

Also the original data matrix can be easily inspected using \code{pimage}.
To rearrange the data matrix, a \code{Order\_matrix} is needed which
can be easily created by telling the construction \func{Order} 
to use \code{order} for row arrangement.

<<label=pimage2, eval=FALSE>>=
pimage(x, main = "Random")
pimage(x, Order(row = order), main = "Reordered")
@
<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-pimage2.png", type = "pnggray", 
    height = 2.8, width = 5, res = 300,pointsize=7)
def.par <- par(no.readonly = TRUE)
layout(t(1:2))
<<pimage2>>
par(def.par)
tmp <- dev.off()
@
\begin{figure}
    \centering
    \includegraphics[width=12cm]{seriation-pimage2}
    \caption{Matrix shading of the iris data matrix.}
    \label{fig:pimage2}
\end{figure}

\subsection{Comparing different seriation methods}

To compare different seriation methods we use again the randomized 
iris data set and the distance matrix from the previous example.
We use some seriation methods described in Section~\ref{sec:methods} 
for dissimilarity matrices.
<<>>=
methods <- c("tsp", "chen", "mds", "hc", "gw", "optimal")
order <- sapply(methods, simplify = FALSE, FUN = function(m) seriate(d, m))
@

The resulting orderings are displayed using matrix shading
(see Figure~\ref{fig:pimage3}).
<<label=pimage3, eval=FALSE>>=
lapply(order, FUN = function(o) pimage(d, o, main = attr(o, "method")))
@
<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-pimage3.png", type = "pnggray", height = 4.5, 
    width = 6, res = 300, pointsize = 10)
def.par <- par(no.readonly = TRUE)
layout(matrix(1:6, ncol = 3, byrow = TRUE))
<<pimage3>>
par(def.par)
tmp <- dev.off()
@

\begin{figure}
    \centering
    \includegraphics[width=\linewidth]{seriation-pimage3}
    \caption{Image plot the distance matrix for the iris data
    using rearrangement by different seriation methods.}
    \label{fig:pimage3}
\end{figure}

Finally, we compare the criterion values for the different seriation
methods. 
<<>>=
crit <- sapply(order, FUN = function(o) criterion(d, o))
crit
@

<<echo=FALSE, fig=TRUE, include=FALSE, label=crit1, width=6, height=10>>=
def.par <- par(no.readonly = TRUE)
m <- c("path_length", "least_squares", "ar_i", "moore_stress")
layout(matrix(1:length(m), ncol=1))
#tmp <- apply(crit[m,], 1, dotchart, sub =m)
tmp <- sapply(m, FUN = function(i) dotchart(crit[i,],sub = i))
par(def.par)
@

\begin{figure}
    \centering
    \includegraphics{seriation-crit1}
    \caption{Comparison of different methods and seriation criteria}
    \label{fig:crit1}
\end{figure}

For easier comparison, we plotted the results for the measures Hamiltonian
path length, least squares criterion, anti-Robinson events and stress using the
Moore neighborhood in Figure~\ref{fig:crit1}.  Clearly, the methods which
directly try to minimize the Hamiltonian path length (hierarchical clustering
with optimal leaf ordering and the TSP heuristic) provide the best results
concerning the path length.  For the least squares criterion and the
anti-Robinson events, using the first dimension of MDS provides the best
results.Regarding stress, TSP and MDS provide the best results.


\subsection{Heat maps}

A heat map is a shaded/color coded data matrix with a dendrogram added to the
one side and to the top to indicate the order of rows and columns. Typically,
reordering is done according to some row or column means within the
restrictions imposed by the dendrogram. Heat maps recently became popular for
visualizing genome expression data obtained via DNA microarray technology
\citep[see, e.g.,][]{seriation:Eisen:1998}. 

From Section~\ref{sec:hierarchical_clustering} we know that it is possible to
find the optimal ordering of the leaf nodes of a dendrogram which minimizes
the distances between adjacent objects in reasonable time.  Such an order might
provide an improvement over using simple reordering such as the row or column
means with respect to presentation. In \pkg{seriation} we provide
the function \func{hmap} which uses optimal ordering and can also use 
seriation directly on distance matrices without using hierarchical
clustering to produce dendrograms first.

For the following example, we use again the randomly reordered iris data set
\code{x} from the above example. To make the variables (columns) comparable, we
use standard scaling.

<<>>=
x <- scale(x, center = FALSE)
@

To produce a heat map with optimally reordered, the function \func{hmap} can be
used with its default settings. With this settings, the Euclidean distances
between rows and between columns are calculated (with \func{dist}),
hierarchical clustering (\func{hclust}) is performed, the resulting dendrograms
are optimally reordered, and \func{heatmap} in package \pkg{stats} is used
for plotting. 

<<eval=FALSE>>=
hmap(x)
hmap(x, dendrogram = FALSE)
@

If \code{dendrogram = FALSE} is used, instead of hierarchical clustering,
seriation on the dissimilarity matrices for rows and columns is performed
(per default a TSP heuristic)
and the reordered matrix with the reordered dissimilarity matrices to the left
and on top is displayed. A \code{method} argument can be used to choose 
different seriation methods.

<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-heatmap1.png", type = "pnggray", 
    height = 6, width = 6, res = 300, pointsize=14)
hmap(x, cexCol=1, labRow = "", margin =c(7,7))
tmp <- dev.off()
@
<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-heatmap2.png", type = "pnggray", 
    height = 6, width = 6, res = 300,pointsize=14)
hmap(x, dendrogram = FALSE)
tmp <- dev.off()
@

\begin{figure}
    \begin{minipage}[b]{.48\linewidth}
        \centering
        \includegraphics[width=\linewidth]{seriation-heatmap1} \\
            (a)
    \end{minipage}
    \begin{minipage}[b]{.48\linewidth}
        \centering
        \includegraphics[width=\linewidth]{seriation-heatmap2} \\
            (b)
    \end{minipage}
    \caption{Two presentations of the rearranged iris data matrix. (a) as an
optimally reordered heat map and (b) as a seriated data matrix with reordered
dissimilarity matrices to the left and on top.}
    \label{fig:heatmap}
\end{figure}


\subsection{Bertin's permutation matrix}

\cite{seriation:Bertin:1981,seriation:Bertin:1999} 
introduced permutation matrices to analyze
multivariate data with medium to low sample size.  The idea is to reveal a more
homogeneous structure in a data matrix $\mathbf{X}$ by simultaneously
rearranging rows and columns. The rearranged matrix is displayed and cases and
variables can be grouped manually to gain a better understanding of the data.

To quantify homogeneity, a purity function
\begin{displaymath}
  \phi = \Phi(\mathbf{X})  
\end{displaymath}
is defined. Let $\Pi$ be the set of all permutation
$\pi$ for matrix $\mathbf{X}$.
Note that function $\pi$ performs row and column permutations on a matrix.
The optimal permutation with respect to
purity
\begin{displaymath}
  \pi^* = \argmax\nolimits_{\pi \in \Pi} \Phi(\pi(\mathbf{X}))  
\end{displaymath}
is found and the rearranged matrix $\pi(\mathbf{X})$ is
displayed. Since, depending on the purity function, finding the optimal
solution can be hard, often a near optimal solution is also acceptable.

A possible purity function $\Phi$ is:
Given distances between rows and columns of the data matrix, define purity as
the sum of distances of adjacent rows/columns.  Using this purity function,
finding the optimal permutation $\pi^*$ means solving two (independent) TSPs,
one for the columns and one for the rows.

As an example, we use the results of $8$ constitutional referenda for $41$
Irish communities~\citep{seriation:Falguerolles:1997}\footnote{The Irish data
set is included in this package. The original numbers and the text of the
referenda can be obtained from~\url{http://www.electionsireland.org/}}.  To
make values comparable across columns (variables), the ranks of the values in
each row are used instead of the original values.  

<<>>=
library("seriation")
data("Irish")

scale_by_rank <- function(x) apply(x, 2, rank)
orig_matrix <- scale_by_rank(Irish[,-6])
@

For seriation, we calculate distances between rows and between columns using
the sum of absolute rank differences (this is equal to the Minkowski distance
with power $1$). Then we apply seriation (using MDS) to both distance matrices
and create a \code{Order} object.  And plot the original and the reordered
matrix using \func{bertinplot}. 

<<>>=
order <- Order(
    row = seriate(dist(orig_matrix, "minkowski", p = 1), method=  "tsp"),
    col = seriate(dist(t(orig_matrix), "minkowski", p = 1), method = "tsp")
)
@



<<eval=FALSE>>=
bertinplot(orig_matrix)
bertinplot(orig_matrix, order)
@
<<echo=FALSE, fig=TRUE, include=FALSE, label=bertin1, width=10>>=
bertinplot(orig_matrix)
@
<<echo=FALSE, fig=TRUE, include=FALSE, label=bertin2, width=10>>=
bertinplot(orig_matrix, order)
@
\begin{figure}
    \centering
    \includegraphics[width=16cm, trim=0 60 0 0]{seriation-bertin1} \\
    (a)
    
    \includegraphics[width=16cm, trim=0 60 0 0]{seriation-bertin2} \\
    (b)    
    \caption{Bertin plot for the (a) original arrangement and the (b) 
    reordered Irish data set.}
    \label{fig:bertin}
\end{figure}



The original matrix and the rearranged matrix are shown in
Figure~\ref{fig:bertin} as a matrix of bars where high values are highlighted
(filled blocks).  Note that following Bertin, the cases (communities) are
displayed as the columns and the variables (referenda) as rows.  Depending on
the number of cases and variables, columns and rows can be exchanged to obtain
a better visualization.

Although the columns are already ordered (communities in the same city appear
consecutively) in the original data matrix in Figure~\ref{fig:bertin}(a), it
takes some effort to find structure in the data.  For example, it seems that
the variables `Marriage', `Divorce', `Right to Travel' and `Right to
Information' are correlated since the values are all high in the block made up
by the columns of the communities in Dublin.  The reordered matrix affirm this
but makes the structure much more apparent. Especially the contribution of low
values (which are not highlighted) to the overall structure becomes only
visible after rearrangement.

\subsection{Binary data matrices}

Binary or $0$-$1$ data matrices are quite common.  Often such matrices are
called \emph{incidence matrices} since a $1$ in a cell indicates the incidence
of an event. In archeology such an event could be that a special type of
artifact was found at a certain archaeological site.
This can be seen as a simplification of a so called \emph{abundance matrix}
which codes in each cell the (relative) frequency or quantity of a an artifact
type at a site. For a comparison of incidence and abundance matrices
in archeology we we refer the reader to~\citep{seriation:Ihm:2005}. 

Here we are interested in binary data.
For the example we use an artificial data set from~\cite{seriation:Bertin:1981}
called \emph{Townships}.  The data set contains $9$ binary characteristics
(e.g., has a veterinary or has a high school) for $16$ townships. The idea of
the data set is that townships evolve from a rural to an urban environment over
time.

After loading the data set (which comes with the package), we use
\func{bertinplot} to visualize the data (\func{pimage} could also be used).
Bars, the standard visualization of \func{bertinplot}, do not
make much sense for binary data. We therefore use the 
panel function \func{panel.squares} without spacing 
to plot just black squares.

<<fig=TRUE, include=FALSE, label=binary1, width=9>>=
library("seriation")
data("Townships")

bertinplot(Townships, options = list(panel=panel.squares, spacing = 0, 
    frame = TRUE))
@

The original data in Figure~\ref{fig:binary}(a) does not reveal structure in
the data. To improve the display, we run the  bond energy algorithm (BEA) for
columns and rows $10$ times with random starting points and keep the best
solution. 

<<echo=FALSE>>=
## to get consistent results
set.seed(5)
@

<<fig=TRUE, include=FALSE, label=binary2, width=9>>=
order <- seriate(Townships, method = "bea", control = list(rep = 10))
bertinplot(Townships, order, options = list(panel=panel.squares, spacing = 0,
    frame = TRUE))
@

The reordered matrix is displayed in Figure~\ref{fig:binary}(b).
A clear structure is visible. The variables (rows in a Bertin plot)
can be split into the three categories describing different evolution states
of townships:
\begin{enumerate}
    \item {\bf Urban:} Railway station, high school and police station
    \item {\bf Intermediate:} Land reallocation, veterinary and agricultural 
        cooperative
    \item {\bf Rural:} No doctor, one-room school and no water supply
\end{enumerate}

The townships also clearly fall into these three groups which tentatively can
be called villages (first $7$), towns (next 5) and cities (final 2).  The
townships B and C are on the transition to the next higher group.

\begin{figure}
    \centering
    \includegraphics[width=12cm, trim=0 40 0 30]{seriation-binary1} \\
    (a)    

    \includegraphics[width=12cm, trim=0 40 0 30]{seriation-binary2} \\
    (b)   

    \caption{The townships data set in original order (a) and 
    reordered using BEA (b).}
    \label{fig:binary}
\end{figure}


<<>>=
rbind(original = criterion(Townships), reordered = criterion(Townships, order))
@

BEA tries to maximize the measure of effectiveness (and bond energy) which is
much higher in the reordered matrix. Also the two types of stress are improved
significantly.

\subsection{Dissimilarity plot}
Judging the quality of a found cluster solution is a research topic since the
invention of cluster analysis. This is especially important since all popular
cluster algorithms produce a clustering even for data without a structure.

%A method to judge the quality of a cluster solution is by inspecting a
%visualization. For hierarchical clustering
%dendrogramms~\cite{seriation:Hartigan:1967} are available which show the
%hierarchical structure of the clustering as a binary tree and cluster quality 
%can be judged by looking at the dissimilarities between objects in a cluster
%and objects in other clusters. However, such a visualization is
%only possible for heirarchical/nested clusterings. 
%
%\marginpar{Cite Pison et al 1999 and Kaufmann and Rousseeuw}
%For the an arbitrary partitional clustering, the original objects can
%be displayed in a 2 dimensional scatter plot
%after using dimensionality reduction (e.g., PCA, MDS).
%Objects belonging to the same cluster can be marked and thus, if the
%dimensionality reduction preserves a large proportion of the
%variavility in the original data, the separation between clusters can be
%visually judged.
%
%Silhouettes

Matrix shading is an old technique to visualize clustering by displaying the
rearranged
matrices~\cite{seriation:Sneath:1973,seriation:Ling:1973,seriation:Gale:1984}.
Initially matrix shading was used in connection with hierarchical clustering,
where the order of the dendrograms leaf nodes was used to arrange the matrix.
However, with some extensions, matrix shading can be also used with any
partitional clustering method. 

\cite{seriation:Strehl:2003} suggest 
a matrix shading visualization called \emph{CLUSION} where the 
dissimilarity matrix is arranged such that all objects pertaining to 
a single cluster appear in consecutive order in the matrix. The authors call
this \emph{coarse seriation}. The result of a ``good'' clustering 
should be a matrix with low dissimilarity values forming blocks around
the main diagonal.
However, using coarse seriation, the order of the clusters has to be predefined
and the objects within each cluster are unordered.

\func{dissplot} aims at reflecting global structure between clusters as well as
the micro structure within clusters. To achieve this, we arrange the clusters as
well as the objects within each cluster using seriation techniques. 
To arrange clusters,
an inter-cluster dissimilarity matrix is calculated using the average between
cluster dissimilarities. \func{reorder.dist} is used on this inter-cluster
dissimilarity matrix to arrange the clusters relative to each other resulting
in on average more similar clusters to appear closer together.
Within each cluster, \func{reorder.dist} is used on the sub-matrix 
of the dissimilarity matrix concerning only the objects in the cluster.

For the example, we use again Euclidean distance between the 
objects in the iris data set.

<<>>=
library("seriation")
data("iris")
iris <- iris[sample(1:nrow(iris)),]
d <- dist(iris[-5])
@

First, we use \func{dissplot} without a clustering. We set \code{method}
to \code{NA} to prevent reordering and display the original matrix. Then
we omit the method argument which results in using the default seriation
technique from \func{seriate.dist} which is a TSP heuristic. Since we did
not provide a clustering, the whole matrix is reordered in one piece.
The result in shown in Figure~\ref{fig:dissplot1}.
From Figure~\ref{fig:dissplot1}(b) it seems that there is a clear structure in
the data which suggesting a two cluster solution.

<<eval=FALSE, label=dissplot1>>=
## plot original matrix
res <- dissplot(d, method = NA)
@

<<eval=FALSE, label=dissplot2>>=
## plot reordered matrix using the nearest insertion algorithm (from tsp)
res <- dissplot(d, options = list(main = "Seriation (TSP)"))
@

<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-dissplot1.png", type = "pnggray", 
    height = 6, width = 6, res = 300, pointsize=11)
<<dissplot1>>
tmp <- dev.off()
bitmap(file = "seriation-dissplot2.png", type = "pnggray", 
    height = 6, width = 6, res = 300, pointsize=11)
<<dissplot2>>
tmp <- dev.off()
@


\begin{figure}
    \begin{minipage}[b]{.48\linewidth}
    \centering
    \includegraphics[width=\linewidth]{seriation-dissplot1} \\
    (a)    
    \end{minipage}
    \begin{minipage}[b]{.48\linewidth}
    \centering
    \includegraphics[width=\linewidth]{seriation-dissplot2} \\
    (b)   
    \end{minipage}
    \caption{Two dissimilarity plots. 
    (a) the original dissimilarity matrix and 
    (b) the seriated dissimilarity matrix.}
    \label{fig:dissplot1}
\end{figure}

Next, we create a cluster solution using k-means. Although we know
that the data set should contain $3$ groups representing the three species
of iris, we let k-means produce a $10$ cluster solution to study how such a 
misspecification can be spotted using \func{dissplot}.


<<echo=FALSE>>=
set.seed(1234)
@
<<>>=
l <- kmeans(d, 10)$cluster
#$
@

We create a standard dissimilarity plot by providing the cluster
solution as a vector of labels. The function rearranges the matrix and
plots the result. Since rearrangement can be a time consuming procedure for
large matrices, the rearranged matrix and all
information needed for plotting is returned as the result. 

<<eval=FALSE>>=
res <- dissplot(d, labels = l,
    options = list(main = "Seriation - standard"))
@
<<echo=FALSE, fig=FALSE, include=FALSE>>=
bitmap(file = "seriation-dissplot3.png", type = "pnggray", 
    height = 8, width = 8, res = 300, pointsize=12)

## visualize the clustering
res <- dissplot(d, l, options = list(main = "Seriation - standard"))
tmp <- dev.off()


bitmap(file = "seriation-dissplot4.png", type = "pnggray", 
    height = 8, width = 8, res = 300, pointsize=12)
## threshold
plot(res, options = list(main = "Seriation - threshold", 
    threshold = 1.5))

tmp <- dev.off()
@

\begin{figure}
    \centering
    \includegraphics[width=10cm]{seriation-dissplot3}\\
    (a)
    
    \includegraphics[width=10cm]{seriation-dissplot4}\\
    (b)
    \caption{Dissimilarity plot for k-means solution with 10 clusters. 
    (a) standard plot and (b) plot with threshold.}
    \label{fig:dissplot3}
\end{figure}

<<>>=
res
@

The resulting plot is shown in Figure~\ref{fig:dissplot3}(a).  The
inter-cluster dissimilarities are shown as gray blocks and the average object
dissimilarity within each clusters as gray triangles below the main diagonal of
the matrix. Since the clusters are arranged such that more similar clusters
are closer together, it is easy to see in Figure~\ref{fig:dissplot3}(a)
that clusters 1, 3 and 6 as well as clusters 2, 4, 8, 5, 7, 9 and 10 
are very similar and build two blocks. 
This suggests again that a two cluster solution would
be reasonable.

Since slight variations of gray values are hard to distinguish,
we plot the matrix again (using \func{plot} on the result above) and
use a threshold on the dissimilarity to suppress high dissimilarity
values in the plot. 

<<eval=FALSE>>=
plot(res, options = list(main = "Seriation - threshold",
    threshold = 2))
@

In resulting plot in Figure~\ref{fig:dissplot3}(b), we see that the
block containing 2, 4, 8, 5, 7, 9 and 10 is very well defined and
cleanly separated from the other block. This suggests that these clusters
in a solution with less clusters should form together a cluster.
The other block is less well defined. There is considerable overlap between
clusters 3 and 6, but also cluster 1 and 3 share similar objects.



Using the information stored in the result of \func{dissplot} and
the class information available for the iris data set, we can analyze
the cluster solution and the interpretations of the dissimilarity plot.

<<>>=
#names(res)
table(iris[res$order, 5], res$label)[,res$cluster_order]
#$
@

As the plot in Figure~\ref{fig:dissplot3} indicated, the clusters 2, 4, 8, 5,
7, 9 and 10 should be a single cluster containing only flowers of the species
Iris setosa. The clusters 1, 3 and 6 are more problematic since they contain a
mixture of Iris versicolor and virginica.

\section{Conclusion}

Write conclusion\dots

%\section*{Acknowledgments}

%
\bibliographystyle{abbrvnat}
\bibliography{seriation}
%
\end{document}

